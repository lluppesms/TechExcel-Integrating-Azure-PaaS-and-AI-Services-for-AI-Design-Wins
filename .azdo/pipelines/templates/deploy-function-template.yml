# ----------------------------------------------------------------------------------------------------
# Template to deploy a pre-built Azure Function artifact to one environment
# ----------------------------------------------------------------------------------------------------
parameters: 
- name: environmentName
  default:  'DEV'

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: InitializeDeploy${{ parameters.environmentName }}Function
  displayName: Initialize Deploy ${{ parameters.environmentName }} Function
  environment: ${{ parameters.environmentName }}

- job: Deploy${{ parameters.environmentName }}Function
  displayName: Deploy ${{ parameters.environmentName }} Function
  variables:
    - name: environmentName
      value: ${{ parameters.environmentName }}
    - template: ../../vars/var-common.yml

  steps:
  - bash: |
      echo "environmentSpecificFunctionName=$(environmentSpecificFunctionName)"
      echo "appName=$(appName)"
      echo "environmentName=$(environmentName)"
      if [[ '$(environmentSpecificFunctionName)' == '' ]]; then
        echo "Using environment coded app name: $(appName)-$(environmentName)"
        functionAppName=$(echo "$(appName)-$(environmentName)" | tr '[:upper:]' '[:lower:]')
      else 
        echo "Using environment specific hard-coded name: $(environmentSpecificFunctionName)"
        functionAppName=$(echo "$(environmentSpecificFunctionName)" | tr '[:upper:]' '[:lower:]')
      fi
      echo "##vso[task.setvariable variable=functionAppName]$functionAppName"
      echo "----------------------------------------"
      echo "Display Current Environment Variables:"
      printenv | sort
    displayName: 'Create Variables'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifacts'
    inputs:
        artifact: drop

  - task: CmdLine@2
    inputs:
      script: |
        echo "environmentSpecificFunctionName=$(environmentSpecificFunctionName)"
        echo "functionAppName=$(functionAppName)"
        echo "serviceConnectionName=$(serviceConnectionName)"
        echo "appName=$(appName)"
        echo "environmentName=$(environmentName)"
        echo "Directory of pipeline workspace:"
        tree -L 4 $(Pipeline.Workspace)
    displayName: 'Display Variables and Tree'
    continueOnError: true

  - task: AzureFunctionApp@1
    displayName: 'Function App Deploy'
    retryCountOnTaskFailure: 2
    inputs:
      azureSubscription: $(serviceConnectionName)
      appType: functionAppLinux
      appName: $(functionAppName)
      package: $(Pipeline.Workspace)/*.zip
